<?php

namespace App\Exports;

use App\Models\Guru;
use App\Models\HasilEvaluasi;
use App\Models\PeriodeEvaluasi;
use Maatwebsite\Excel\Concerns\FromArray;
use Maatwebsite\Excel\Concerns\WithTitle;
use Maatwebsite\Excel\Concerns\WithStyles;
use Maatwebsite\Excel\Concerns\ShouldAutoSize;
use PhpOffice\PhpSpreadsheet\Worksheet\Worksheet;

class HasilEvaluasiExport implements FromArray, WithTitle, WithStyles, ShouldAutoSize
{
    protected $hasilEvaluasi;
    protected $detailKriteria;
    protected $evaluatorCounts;

    public function __construct($hasilEvaluasi, $detailKriteria, $evaluatorCounts)
    {
        $this->hasilEvaluasi = $hasilEvaluasi;
        $this->detailKriteria = $detailKriteria;
        $this->evaluatorCounts = $evaluatorCounts;
    }

    public function array(): array
    {
        // Load data guru dan periode
        $guru = Guru::with('user')->find($this->hasilEvaluasi->guru_id);
        $periode = PeriodeEvaluasi::find($this->hasilEvaluasi->periode_evaluasi_id);
        
        $data = [];
        
        // Header laporan
        $data[] = ['LAPORAN HASIL EVALUASI KINERJA GURU'];
        $data[] = [''];
        
        // Informasi guru
        $data[] = ['Nama Guru:', $guru->user->name ?? 'N/A'];
        $data[] = ['NIP:', $guru->nip ?? 'N/A'];
        $data[] = ['Periode Evaluasi:', $periode->judul ?? 'N/A'];
        $data[] = ['Tanggal Periode:', $this->formatDateRange($periode)];
        $data[] = ['Tanggal Export:', date('d/m/Y H:i:s')];
        $data[] = [''];
        
        // Ringkasan hasil
        $data[] = ['RINGKASAN HASIL EVALUASI'];
        $data[] = [''];
        $data[] = ['Sumber Penilaian', 'Nilai Rata-rata', 'Jumlah Evaluator'];
        $data[] = ['Siswa', $this->formatNumber($this->hasilEvaluasi->nilai_siswa), $this->evaluatorCounts['siswa'] ?? 0];
        $data[] = ['Rekan Guru', $this->formatNumber($this->hasilEvaluasi->nilai_rekan), $this->evaluatorCounts['rekan'] ?? 0];
        $data[] = ['Kepala Sekolah', $this->formatNumber($this->hasilEvaluasi->nilai_pengawas), $this->evaluatorCounts['pengawas'] ?? 0];
        $data[] = [''];
        $data[] = ['NILAI AKHIR:', $this->formatNumber($this->hasilEvaluasi->nilai_akhir)];
        $data[] = ['Kategori:', $this->getNilaiKategori($this->hasilEvaluasi->nilai_akhir)];
        $data[] = [''];
        
        // Detail per kriteria dengan sub kriteria
        if (!empty($this->detailKriteria)) {
            $data[] = ['DETAIL EVALUASI PER KRITERIA'];
            $data[] = [''];
            $data[] = ['Kriteria / Sub Kriteria', 'Bobot (%)', 'Nilai Siswa', 'Nilai Rekan', 'Nilai Pengawas', 'Nilai Rata-rata'];
            
            foreach ($this->detailKriteria as $detail) {
                // Konversi stdClass atau array ke array
                $detailArray = is_array($detail) ? $detail : (array)$detail;
                
                // Baris kriteria utama
                $data[] = [
                    $detailArray['kriteria_nama'] ?? 'N/A',
                    $this->formatNumber($detailArray['kriteria_bobot'] ?? 0),
                    $this->formatNumber($detailArray['nilai_rata_siswa'] ?? 0),
                    $this->formatNumber($detailArray['nilai_rata_rekan'] ?? 0),
                    $this->formatNumber($detailArray['nilai_pengawas'] ?? 0),
                    $this->formatNumber($detailArray['nilai_rata_akhir'] ?? 0),
                ];
                
                // Tampilkan sub kriteria jika ada
                if (isset($detailArray['sub_kriteria']) && is_array($detailArray['sub_kriteria']) && !empty($detailArray['sub_kriteria'])) {
                    foreach ($detailArray['sub_kriteria'] as $subKriteria) {
                        $subArray = is_array($subKriteria) ? $subKriteria : (array)$subKriteria;
                        
                        $data[] = [
                            '  â””â”€ ' . ($subArray['sub_kriteria_nama'] ?? 'N/A'),
                            $this->formatNumber($subArray['sub_kriteria_bobot'] ?? 0),
                            $this->formatNumber($subArray['nilai_rata_siswa'] ?? 0),
                            $this->formatNumber($subArray['nilai_rata_rekan'] ?? 0),
                            $this->formatNumber($subArray['nilai_pengawas'] ?? 0),
                            $this->formatNumber($subArray['nilai_rata_akhir'] ?? 0),
                        ];
                    }
                }
            }
        }
        
        // Footer
        $data[] = [''];
        $data[] = ['Generated by Sistem Evaluasi Guru - ' . config('app.name', 'Laravel')];
        
        return $data;
    }

    public function title(): string
    {
        return 'Hasil Evaluasi';
    }

    public function styles(Worksheet $sheet)
    {
        $styles = [
            // Header utama
            1 => [
                'font' => ['bold' => true, 'size' => 16],
                'alignment' => ['horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER]
            ],
            
            // Header section
            9 => ['font' => ['bold' => true, 'size' => 12]],
            11 => ['font' => ['bold' => true]],
            15 => ['font' => ['bold' => true, 'color' => ['rgb' => '0066CC']]],
            16 => ['font' => ['bold' => true]],
            
            // Header tabel detail
            19 => ['font' => ['bold' => true, 'size' => 12]],
            21 => [
                'font' => ['bold' => true],
                'fill' => [
                    'fillType' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID,
                    'startColor' => ['rgb' => 'E6E6FA']
                ]
            ],
        ];

        // Merge cell untuk judul
        $sheet->mergeCells('A1:F1');
        
        // Style untuk baris kriteria utama (bold)
        $currentRow = 22; // Mulai dari baris setelah header tabel
        if (!empty($this->detailKriteria)) {
            foreach ($this->detailKriteria as $detail) {
                $detailArray = is_array($detail) ? $detail : (array)$detail;
                
                // Style untuk kriteria utama
                $styles[$currentRow] = [
                    'font' => ['bold' => true],
                    'fill' => [
                        'fillType' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID,
                        'startColor' => ['rgb' => 'F0F8FF']
                    ]
                ];
                $currentRow++;
                
                // Skip sub kriteria untuk styling (sub kriteria tidak bold)
                if (isset($detailArray['sub_kriteria']) && is_array($detailArray['sub_kriteria'])) {
                    $currentRow += count($detailArray['sub_kriteria']);
                }
            }
        }
        
        return $styles;
    }

    private function formatNumber($value): string
    {
        if (is_null($value)) {
            return '0.00';
        }
        return number_format((float)$value, 2);
    }

    private function formatDateRange($periode): string
    {
        if (!$periode) {
            return 'N/A';
        }
        
        $start = $periode->tanggal_mulai ? date('d/m/Y', strtotime($periode->tanggal_mulai)) : 'N/A';
        $end = $periode->tanggal_selesai ? date('d/m/Y', strtotime($periode->tanggal_selesai)) : 'N/A';
        
        return $start . ' - ' . $end;
    }

    private function getNilaiKategori($nilai): string
    {
        $nilai = (float)$nilai;
        
        if ($nilai >= 90) {
            return 'Sangat Baik (A)';
        } elseif ($nilai >= 80) {
            return 'Baik (B)';
        } elseif ($nilai >= 70) {
            return 'Cukup (C)';
        } elseif ($nilai >= 60) {
            return 'Kurang (D)';
        } else {
            return 'Sangat Kurang (E)';
        }
    }
}